[1,["ecpdLyjvZBwrvm+cedCcQy","f0BIwQ8D5Ml7nTNQbh1YlS","e97GVMl6JHh5Ml5qEDdSGa","29FYIk+N1GYaeWH/q1NxQO","7aoSmEQIZEK40uZa/pDrMO","91XjPVhX1OcaIhtrYsH0XZ","adbnl2xoBHspTwUA0t/Bab","31/JNzTBFKNrE1+bGRcEGI","71VhFCTINJM6/Ky3oX9nBT","b7dU+aiWNCebjMvETVzBG1","44ym0wTdRFaKbw7WwxcwvK","cbwLFylpVAUrzqqlhW9lpd","808vtr9kBKD4NTHI5n/evT","b4P/PCArtIdIH38t6mlw8Y","e8Ueib+qJEhL6mXAHdnwbi"],["node","_textureSetter","_parent","_spriteFrame","_effectAsset","scene","_normalMaterial","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite"],["cc.SpriteFrame",["cc.Node",["_name","_id","_objFlags","_components","_contentSize","_parent","_trs","_children","_color"],0,9,5,1,7,12,5],["cc.Node",["_name","_objFlags","_is3DNode","_children","_components","_contentSize","_parent","_trs"],0,2,9,5,1,7],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","node","_materials","_spriteFrame"],0,1,3,6],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Canvas",["node"],3,1],["40a07OQxtRBIIJ1xLJHYak4",["node"],3,1],["cc.Widget",["alignMode","_alignFlags","_originalWidth","_originalHeight","node"],-1,1],["cc.Button",["node","_N$normalColor","_N$pressedColor","_N$disabledColor","_N$target","_normalMaterial","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite"],3,1,5,5,5,1,6,6,6,6,6],["cc.Scene",["_name","_children","_anchorPoint","_trs"],2,2,5,7],["cc.Camera",["_clearFlags","_depth","node"],1,1],["cc.Label",["_string","_fontSize","_enableWrapText","_N$horizontalAlign","_N$verticalAlign","_N$overflow","_N$cacheMode","node","_materials"],-4,1,3],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1],["cc.Material",["_name","_techniqueData"],2,11]],[[3,0,2,3,4,5,3],[12,0,1,2,4],[4,0,1,3],[1,0,1,7,3,4,6,3],[1,0,5,4,2],[1,0,5,3,6,2],[1,0,2,5,3,8,4,3],[1,0,5,3,4,2],[2,0,1,3,4,5,3],[2,0,6,3,4,5,7,2],[2,0,2,6,3,4,5,3],[5,0,1],[6,0,1],[3,1,0,3,4,5,3],[7,0,1,2,3,4,5],[8,0,1,2,3,4,5,6,7,8,9,1],[9,0,1,2,3,2],[10,0,1,2,3],[11,0,1,2,3,4,5,6,7,8,8],[13,0,1,3],[14,0,1,2]],[[[[2,"MiCard",null],[3,"Canvas","61khiwEFtCJqqoJFlyrg1b",[[-3,[4,"touchLayer",-4,[5,960,640]],-5,-6],1,4,1,1],[[11,-1],[12,-2]],[5,960,640],[480,320,0,0,0,0,1,1,1,1]],[8,"Background",512,[-9],[[13,1,0,-7,[1],2],[14,0,45,100,40,-8]],[5,100,40]],[9,"button",1,[2],[[15,-10,[4,4293322470],[4,4291348680],[4,3363338360],2,3,4,5,6,7]],[5,100,40],[292.261,207.268,0,0,0,0,1,1,1,1]],[10,"cardBg",true,1,[-12],[[0,2,false,-11,[11],12]],[5,216,300]],[16,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[5,"Main Camera",1,[[17,7,-1,-13]],[0,0,405.2998889711173,0,0,0,1,1,1,1]],[6,"Label",512,2,[[18,"button",20,false,1,1,1,1,-14,[0]]],[4,4278190080],[5,100,40]],[7,"cardNum",4,[[0,2,false,-15,[8,9],10]],[5,216,300]]],0,[0,0,1,0,0,1,0,-1,6,0,2,1,0,-3,3,0,-4,4,0,0,2,0,0,2,0,-1,7,0,0,3,0,0,4,0,-1,8,0,0,6,0,0,7,0,0,8,0,5,5,1,2,5,2,2,3,15],[0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,3,6,7,8,9,10,-1,-2,3,-1,3],[0,0,1,0,1,2,1,3,4,0,5,6,7]],[[{"name":"default_btn_disabled","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[0],0,[0],[1],[8]],[[{"name":"card-back","rect":[1,1,214,299],"offset":[0,-0.5],"originalSize":[216,300],"capInsets":[0,0,0,0]}],[0],0,[0],[1],[9]],[[[1,"micardNum",[{"hash":1193838551,"record":null,"name":"micardNum|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nuniform ParameterVS {\n  vec4 xlist;\n  vec4 ylist;\n  vec4 xlistSymmetricPos;\n  vec4 ylistSymmetricPos;\n  vec2 disX;\n  vec2 disY;\n  vec2 disYSymmetricPos;\n  vec2 disXSymmetricPos;\n  vec2 worldPos;\n  float sprWidth;\n  float sprHight;\n  float worldSprWidth;\n  float worldSprHeight;\n};\nout vec4 v_xlist;\nout vec4 v_ylist;\nout vec2 v_disX;\nout vec2 v_disY;\nout float v_sprWidth;\nout float v_sprHight;\nvec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n    float disX = pos2.x - pos1.x;\n    float disY = pos2.y - pos1.y;\n    if (disX == 0.0)\n    {\n        float x = pos1.x - sp.x;\n        return vec2(pos1.x + x,sp.y);\n    }\n    float k1 = disY/disX;\n    float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);\n    float x = (y - sp.y)/(-1.0/k1)+sp.x;\n    return vec2(x,y);\n}\nvoid main () {\n  v_sprWidth = sprWidth;\n  v_sprHight = sprHight;\n  v_xlist = xlist;\n  v_ylist = ylist;\n  v_disX = disX;\n  v_disY = disY;\n  vec2 pos1 = vec2(0.0,0.0);\n  vec2 pos2 = vec2(0.0,0.0);\n  if (disXSymmetricPos[0] != 0.0 || disXSymmetricPos[1] != 0.0)\n  {\n      if (disXSymmetricPos[0] == 0.0)\n      {\n          pos1 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y);\n          pos2 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y+worldSprHeight);\n      }\n      else\n      {\n          pos1 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y);\n          pos2 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y+worldSprHeight);\n      }\n  }\n  else if (disYSymmetricPos[0] != 0.0 || disYSymmetricPos[1] != 0.0)\n  {\n      if (disYSymmetricPos[0] == 0.0)\n      {\n          pos1 = vec2(worldPos.x,(worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n          pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n      }\n      else\n      {\n          pos1 = vec2(worldPos.x, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n          pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n      }\n  }\n  else if(xlistSymmetricPos.x != 0.0 || xlistSymmetricPos.y != 0.0 || xlistSymmetricPos.z != 0.0){\n      pos1 = vec2(xlistSymmetricPos.y+worldPos.x,worldSprHeight - ylistSymmetricPos.y + worldPos.y);\n      pos2 = vec2(xlistSymmetricPos.z+worldPos.x,worldSprHeight - ylistSymmetricPos.z + worldPos.y);\n  }\n  vec2 sp = vec2(a_position.x, a_position.y);\n  vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n  vec4 tmp_pos = vec4(a_position.x, a_position.y,a_position.z, 1.0);\n  tmp_pos.x = symmetricPos.x ;\n  tmp_pos.y = symmetricPos.y ;\n  mat4 mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * tmp_pos ;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform ParameterFS {\n  vec4 xlist;\n  vec4 ylist;\n  vec2 disX;\n  vec2 disY;\n  float sprWidth;\n  float sprHight;\n};\nbool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*sprWidth;\n    float dy = py*sprHight;\n    if (disX[0] != 0.0 || disX[1] != 0.0)\n    {\n        if (dx >= disX[0] && dx <= disX[1]){\n            return true;\n        }\n    }\n    else if (disY[0] != 0.0 || disY[1] != 0.0)\n    {\n        if (dy >= disY[0] && dy <= disY[1]){\n            return true;\n        }\n    }\n    if ( ((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0]) )\n    {\n      b = !b;\n    }\n    if ( ((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1]) )\n    {\n      b = !b;\n    }\n    if ( ((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2]) )\n    {\n      b = !b;\n    }\n    return b;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture(texture, v_uv0);\n  bool hide = isHide( v_uv0.x , v_uv0.y);\n  if (!hide)\n  {\n    o.a = 0.0;\n  }\n  gl_FragColor = v_color * o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nuniform vec4 xlist;\nuniform vec4 ylist;\nuniform vec4 xlistSymmetricPos;\nuniform vec4 ylistSymmetricPos;\nuniform vec2 disX;\nuniform vec2 disY;\nuniform vec2 disYSymmetricPos;\nuniform vec2 disXSymmetricPos;\nuniform vec2 worldPos;\nuniform float sprWidth;\nuniform float sprHight;\nuniform float worldSprWidth;\nuniform float worldSprHeight;\nvarying vec4 v_xlist;\nvarying vec4 v_ylist;\nvarying vec2 v_disX;\nvarying vec2 v_disY;\nvarying float v_sprWidth;\nvarying float v_sprHight;\nvec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n    float disX = pos2.x - pos1.x;\n    float disY = pos2.y - pos1.y;\n    if (disX == 0.0)\n    {\n        float x = pos1.x - sp.x;\n        return vec2(pos1.x + x,sp.y);\n    }\n    float k1 = disY/disX;\n    float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);\n    float x = (y - sp.y)/(-1.0/k1)+sp.x;\n    return vec2(x,y);\n}\nvoid main () {\n  v_sprWidth = sprWidth;\n  v_sprHight = sprHight;\n  v_xlist = xlist;\n  v_ylist = ylist;\n  v_disX = disX;\n  v_disY = disY;\n  vec2 pos1 = vec2(0.0,0.0);\n  vec2 pos2 = vec2(0.0,0.0);\n  if (disXSymmetricPos[0] != 0.0 || disXSymmetricPos[1] != 0.0)\n  {\n      if (disXSymmetricPos[0] == 0.0)\n      {\n          pos1 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y);\n          pos2 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y+worldSprHeight);\n      }\n      else\n      {\n          pos1 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y);\n          pos2 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y+worldSprHeight);\n      }\n  }\n  else if (disYSymmetricPos[0] != 0.0 || disYSymmetricPos[1] != 0.0)\n  {\n      if (disYSymmetricPos[0] == 0.0)\n      {\n          pos1 = vec2(worldPos.x,(worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n          pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n      }\n      else\n      {\n          pos1 = vec2(worldPos.x, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n          pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n      }\n  }\n  else if(xlistSymmetricPos.x != 0.0 || xlistSymmetricPos.y != 0.0 || xlistSymmetricPos.z != 0.0){\n      pos1 = vec2(xlistSymmetricPos.y+worldPos.x,worldSprHeight - ylistSymmetricPos.y + worldPos.y);\n      pos2 = vec2(xlistSymmetricPos.z+worldPos.x,worldSprHeight - ylistSymmetricPos.z + worldPos.y);\n  }\n  vec2 sp = vec2(a_position.x, a_position.y);\n  vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n  vec4 tmp_pos = vec4(a_position.x, a_position.y,a_position.z, 1.0);\n  tmp_pos.x = symmetricPos.x ;\n  tmp_pos.y = symmetricPos.y ;\n  mat4 mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * tmp_pos ;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 xlist;\nuniform vec4 ylist;\nuniform vec2 disX;\nuniform vec2 disY;\nuniform float sprWidth;\nuniform float sprHight;\nbool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*sprWidth;\n    float dy = py*sprHight;\n    if (disX[0] != 0.0 || disX[1] != 0.0)\n    {\n        if (dx >= disX[0] && dx <= disX[1]){\n            return true;\n        }\n    }\n    else if (disY[0] != 0.0 || disY[1] != 0.0)\n    {\n        if (dy >= disY[0] && dy <= disY[1]){\n            return true;\n        }\n    }\n    if ( ((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0]) )\n    {\n      b = !b;\n    }\n    if ( ((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1]) )\n    {\n      b = !b;\n    }\n    if ( ((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2]) )\n    {\n      b = !b;\n    }\n    return b;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(texture, v_uv0);\n  bool hide = isHide( v_uv0.x , v_uv0.y);\n  if (!hide)\n  {\n    o.a = 0.0;\n  }\n  gl_FragColor = v_color * o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ParameterVS","binding":0,"members":[{"name":"xlist","type":16,"count":1},{"name":"ylist","type":16,"count":1},{"name":"xlistSymmetricPos","type":16,"count":1},{"name":"ylistSymmetricPos","type":16,"count":1},{"name":"disX","type":14,"count":1},{"name":"disY","type":14,"count":1},{"name":"disYSymmetricPos","type":14,"count":1},{"name":"disXSymmetricPos","type":14,"count":1},{"name":"worldPos","type":14,"count":1},{"name":"sprWidth","type":13,"count":1},{"name":"sprHight","type":13,"count":1},{"name":"worldSprWidth","type":13,"count":1},{"name":"worldSprHeight","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"ParameterFS","binding":2,"members":[{"name":"xlist","type":16,"count":1},{"name":"ylist","type":16,"count":1},{"name":"disX","type":14,"count":1},{"name":"disY","type":14,"count":1},{"name":"sprWidth","type":13,"count":1},{"name":"sprHight","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"micardNum|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"xlist":{"type":16,"value":[1,1,0,1]},"ylist":{"type":16,"value":[0,0,0,0]},"disX":{"type":14,"value":[0,0]},"disY":{"type":14,"value":[0,0]},"worldSprWidth":{"type":13,"value":[100]},"worldSprHeight":{"type":13,"value":[100]},"worldPos":{"type":14,"value":[0,0]},"xlistSymmetricPos":{"type":16,"value":[0,0,0,0]},"ylistSymmetricPos":{"type":16,"value":[0,0,0,0]},"disXSymmetricPos":{"type":14,"value":[0,0]},"disYSymmetricPos":{"type":14,"value":[0,0]},"sprWidth":{"type":13,"value":[100]},"sprHight":{"type":13,"value":[100]}}}]}]]],0,0,[],[],[]],[[[19,"micardMaterialNum",{"0":{"defines":{}}}]],0,0,[0],[4],[10]],[[[1,"micard",[{"hash":3538559857,"record":null,"name":"micard|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nuniform ParameterVS {\n  vec4 xlist;\n  vec4 ylist;\n  vec2 disX;\n  vec2 disY;\n  float sprWidth;\n  float sprHight;\n};\nout vec4 v_xlist;\nout vec4 v_ylist;\nout vec2 v_disX;\nout vec2 v_disY;\nout float v_sprWidth;\nout float v_sprHight;\nvoid main () {\n  v_sprWidth = sprWidth;\n  v_sprHight = sprHight;\n  v_xlist = xlist;\n  v_ylist = ylist;\n  v_disX = disX;\n  v_disY = disY;\n  mat4 mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position,1) ;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nin vec4 v_xlist;\nin vec4 v_ylist;\nin vec2 v_disX;\nin vec2 v_disY;\nin float v_sprWidth;\nin float v_sprHight;\nbool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*v_sprWidth;\n    float dy = py*v_sprHight;\n    if (v_disX[0] != 0.0 || v_disX[1] != 0.0)\n    {\n        if (dx >= v_disX[0] && dx <= v_disX[1]){\n            return true;\n        }\n    }\n    else if (v_disY[0] != 0.0 || v_disY[1] != 0.0)\n    {\n        if (dy >= v_disY[0] && dy <= v_disY[1]){\n            return true;\n        }\n    }\n    if ( ((v_ylist[0]>=dy) != (v_ylist[2]>=dy)) && (dx < (v_xlist[2]-v_xlist[0]) * (dy-v_ylist[0]) / (v_ylist[2]-v_ylist[0]) + v_xlist[0]) )\n    {\n      b = !b;\n    }\n    if ( ((v_ylist[1]>=dy) != (v_ylist[0]>=dy)) && (dx < (v_xlist[0]-v_xlist[1]) * (dy-v_ylist[1]) / (v_ylist[0]-v_ylist[1]) + v_xlist[1]) )\n    {\n      b = !b;\n    }\n    if ( ((v_ylist[2]>=dy) != (v_ylist[1]>=dy)) && (dx < (v_xlist[1]-v_xlist[2]) * (dy-v_ylist[2]) / (v_ylist[1]-v_ylist[2]) + v_xlist[2]) )\n    {\n      b = !b;\n    }\n    return b;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture(texture, v_uv0);\n  bool hide = isHide( v_uv0.x , v_uv0.y);\n  if (hide)\n  {\n    o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nuniform vec4 xlist;\nuniform vec4 ylist;\nuniform vec2 disX;\nuniform vec2 disY;\nuniform float sprWidth;\nuniform float sprHight;\nvarying vec4 v_xlist;\nvarying vec4 v_ylist;\nvarying vec2 v_disX;\nvarying vec2 v_disY;\nvarying float v_sprWidth;\nvarying float v_sprHight;\nvoid main () {\n  v_sprWidth = sprWidth;\n  v_sprHight = sprHight;\n  v_xlist = xlist;\n  v_ylist = ylist;\n  v_disX = disX;\n  v_disY = disY;\n  mat4 mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position,1) ;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvarying vec4 v_xlist;\nvarying vec4 v_ylist;\nvarying vec2 v_disX;\nvarying vec2 v_disY;\nvarying float v_sprWidth;\nvarying float v_sprHight;\nbool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*v_sprWidth;\n    float dy = py*v_sprHight;\n    if (v_disX[0] != 0.0 || v_disX[1] != 0.0)\n    {\n        if (dx >= v_disX[0] && dx <= v_disX[1]){\n            return true;\n        }\n    }\n    else if (v_disY[0] != 0.0 || v_disY[1] != 0.0)\n    {\n        if (dy >= v_disY[0] && dy <= v_disY[1]){\n            return true;\n        }\n    }\n    if ( ((v_ylist[0]>=dy) != (v_ylist[2]>=dy)) && (dx < (v_xlist[2]-v_xlist[0]) * (dy-v_ylist[0]) / (v_ylist[2]-v_ylist[0]) + v_xlist[0]) )\n    {\n      b = !b;\n    }\n    if ( ((v_ylist[1]>=dy) != (v_ylist[0]>=dy)) && (dx < (v_xlist[0]-v_xlist[1]) * (dy-v_ylist[1]) / (v_ylist[0]-v_ylist[1]) + v_xlist[1]) )\n    {\n      b = !b;\n    }\n    if ( ((v_ylist[2]>=dy) != (v_ylist[1]>=dy)) && (dx < (v_xlist[1]-v_xlist[2]) * (dy-v_ylist[2]) / (v_ylist[1]-v_ylist[2]) + v_xlist[2]) )\n    {\n      b = !b;\n    }\n    return b;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(texture, v_uv0);\n  bool hide = isHide( v_uv0.x , v_uv0.y);\n  if (hide)\n  {\n    o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ParameterVS","binding":0,"members":[{"name":"xlist","type":16,"count":1},{"name":"ylist","type":16,"count":1},{"name":"disX","type":14,"count":1},{"name":"disY","type":14,"count":1},{"name":"sprWidth","type":13,"count":1},{"name":"sprHight","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"micard|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"xlist":{"type":16,"value":[1,1,0,1]},"ylist":{"type":16,"value":[0,0,0,0]},"disX":{"type":14,"value":[0,0]},"disY":{"type":14,"value":[0,0]},"sprWidth":{"type":13,"value":[100]},"sprHight":{"type":13,"value":[100]}}}]}]]],0,0,[],[],[]],[[{"name":"club-10","rect":[0,0,215,300],"offset":[-0.5,0],"originalSize":[216,300],"capInsets":[0,0,0,0]}],[0],0,[0],[1],[11]],[[[20,"micardMaterial",[{},"0",11,[{"defines":{}},"props",11,[{"sprWidth":216,"sprHight":300},"xlist",8,[2,0,0,0,0],"ylist",8,[2,0,0,0,0]]]]]],0,0,[0],[4],[12]],[[{"name":"default_btn_pressed","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[0],0,[0],[1],[13]],[[{"name":"default_btn_normal","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[0],0,[0],[1],[14]]]]